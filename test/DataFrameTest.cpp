//
// Created by sunnysab on 2021/6/30.
//

#include "protocol/DataFrame.h"
#include "protocol/RequestPayload.h"
#include "gtest/gtest.h"


TEST(TestDataFrame, serialize) {
    DataFrame data_frame;
    auto *payload = new RequestPayload();

    payload->client_name = "AntClient";
    payload->file_name = "file-name";
    payload->file_id = 0x01;
    payload->file_size = 0x100;
    payload->block_size = 1024;

    data_frame.seq = 0x00341256;
    data_frame.ack = 0x00341257;
    data_frame.type = FrameType::SendRequest;
    data_frame.put(payload);

    auto buffer = data_frame.serialize();
    std::vector<uint8_t> expected = {
            0x00, 0x34, 0x12, 0x56, 0x00, 0x34, 0x12, 0x57, 0x01, 0x08, 0x26, 0x95, 0xb9, 0x00, 0x09, 0x41, 0x6e, 0x74,
            0x43, 0x6c,
            0x69, 0x65, 0x6e, 0x74, 0x00, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x00, 0x00,
            0x01, 0x00,
            0x00, 0x01, 0x00, 0x04, 0x00
    };
    ASSERT_EQ(buffer, expected);
}


TEST(TestDataFrame, deserialize) {
    DataFrame expected;
    auto *payload = new RequestPayload();

    payload->client_name = "AntClient";
    payload->file_name = "file-name";
    payload->file_id = 0x01;
    payload->file_size = 0x100;
    payload->block_size = 1024;

    expected.seq = 0x00341256;
    expected.ack = 0x00341257;
    expected.type = FrameType::SendRequest;
    expected.put(payload);

    std::vector<uint8_t> buffer = {
            0x00, 0x34, 0x12, 0x56, 0x00, 0x34, 0x12, 0x57, 0x01, 0x08, 0x26, 0x95, 0xb9, 0x00, 0x09, 0x41, 0x6e, 0x74,
            0x43, 0x6c,
            0x69, 0x65, 0x6e, 0x74, 0x00, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x00, 0x00,
            0x01, 0x00,
            0x00, 0x01, 0x00, 0x04, 0x00
    };
    auto result = DataFrame::deserialize(buffer);
    ASSERT_EQ(result, expected);
}